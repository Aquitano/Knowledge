---
import Section from '../components/common/Section.astro';
import type { ArticleFrontmatter } from '../lib/types';
import { getShortDescription, generateSourceUrl, processContentInDir } from '../lib/utils';
import { GLOBAL } from '../lib/variables';
import type { MarkdownLayoutProps } from 'astro';
import Layout from './Layout.astro';
import BlogPost from '../components/blog/BlogPost.astro';
import RelatedPosts from '../components/blog/RelatedPosts.astro';

type Props = MarkdownLayoutProps<ArticleFrontmatter>;

const { frontmatter, headings } = Astro.props;
const shortDescription = getShortDescription(frontmatter.description);
const sourceUrl = generateSourceUrl(frontmatter.filename, 'blog');

// Get all blog posts for related posts component
const allBlogPosts = await processContentInDir<ArticleFrontmatter, ArticleFrontmatter>('blog', (data) => {
    const shortDescription = getShortDescription(data.frontmatter.description);
    return {
        title: data.frontmatter.title,
        description: shortDescription,
        tags: data.frontmatter.tags,
        time: data.frontmatter.time,
        timestamp: data.frontmatter.timestamp,
        filename: `${data.frontmatter.filename}`,
        author: data.frontmatter.author,
        cover: data.frontmatter.cover,
        avatar: data.frontmatter.avatar,
    };
});
---

<Layout title={`${frontmatter.title} • ${GLOBAL.username}`} description={shortDescription}>
    <Fragment slot="head">
        <title>{frontmatter.title} • {GLOBAL.username}</title>
        <meta name="description" content={frontmatter.description} />
        <meta property="og:type" content="article" />
        <meta property="og:title" content={`${frontmatter.title} • ${GLOBAL.username}`} />
        <meta property="og:description" content={shortDescription} />
        {frontmatter.cover && <meta property="og:image" content={frontmatter.cover} />}
        <meta property="og:url" content={sourceUrl} />
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:title" content={`${frontmatter.title} • ${GLOBAL.username}`} />
        <meta name="twitter:description" content={shortDescription} />
        {frontmatter.cover && <meta name="twitter:image" content={frontmatter.cover} />}
        <meta http-equiv="content-language" content="en" />
        <meta name="language" content="English" />
        <link rel="canonical" href={sourceUrl} />

        {/* Add schema.org metadata */}
        <script
            type="application/ld+json"
            set:html={JSON.stringify({
                '@context': 'https://schema.org',
                '@type': 'BlogPosting',
                mainEntityOfPage: {
                    '@type': 'WebPage',
                    '@id': sourceUrl,
                },
                headline: frontmatter.title,
                description: shortDescription,
                image: frontmatter.cover || '',
                author: {
                    '@type': 'Person',
                    name: GLOBAL.username,
                },
                publisher: {
                    '@type': 'Organization',
                    name: GLOBAL.username,
                    logo: {
                        '@type': 'ImageObject',
                        url: `${GLOBAL.rootUrl}/${GLOBAL.profileImage}`,
                    },
                },
                datePublished: frontmatter.timestamp,
                dateModified: frontmatter.timestamp,
            })}
        />

        {/* Add estimated reading time if available */}
        {frontmatter.time && <meta property="article:read_time" content={frontmatter.time.toString()} />}
    </Fragment>

    <Section class="pt-8">
        <div class="mb-2">
            <a href="/" class="text-primary flex items-center gap-1 hover:underline">
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-4 w-4"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                >
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                </svg>
                Back to all articles
            </a>
        </div>

        <BlogPost frontmatter={frontmatter} headings={headings} url={Astro.url.pathname}>
            <slot />
        </BlogPost>

        <RelatedPosts
            currentPost={{ id: frontmatter.filename, data: frontmatter, slug: frontmatter.filename }}
            posts={allBlogPosts.map((post) => ({
                id: post.filename,
                data: post,
                slug: post.filename,
            }))}
        />
    </Section>
</Layout>
